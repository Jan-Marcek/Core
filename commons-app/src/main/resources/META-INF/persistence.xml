<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
			 version="2.0">

	<persistence-unit name="intlib">
		<provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
		<class>cz.cuni.mff.xrg.odcs.commons.app.dpu.DPUInstanceRecord</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.dpu.DPUTemplateRecord</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.execution.log.LogMessage</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.execution.log.LogExceptionLine</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.execution.context.ProcessingUnitInfo</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.execution.context.DataUnitInfo</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.execution.context.ExecutionContextInfo</class>		
		<class>cz.cuni.mff.xrg.odcs.commons.app.execution.message.MessageRecord</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.pipeline.Pipeline</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.pipeline.PipelineExecution</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.pipeline.graph.Edge</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.pipeline.graph.Node</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.pipeline.graph.PipelineGraph</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.pipeline.graph.Position</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.rdf.namespace.NamespacePrefix</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.scheduling.EmailAddress</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.scheduling.Schedule</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.scheduling.UserNotificationRecord</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.scheduling.ScheduleNotificationRecord</class>
		<class>cz.cuni.mff.xrg.odcs.commons.app.user.User</class>
		<exclude-unlisted-classes>false</exclude-unlisted-classes>
		<properties>

			<!-- Database connection parameters are loaded at runtime from AppConfiguration -->

			<!-- Dummy database platform needs to be specified to disable autodetection, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=383200 -->
			<property name="eclipselink.target-database" value="HSQL" />
			
			<!-- Session customizer overrides selected DB platform and sets up Virtuoso platform. -->
			<property name="eclipselink.session.customizer" value="virtuoso.eclipselink.VirtuosoSessionCustomizer" />
			
			<!-- We want weaving (e.g. for lazyloading). Dynamic (=runtime) weaving needs Java agent, static (=compile-time) should suffice for our needs. -->
			<property name="eclipselink.weaving" value="static"/>
			
			<property name="eclipselink.logging.level.sql" value="WARNING"/>
			
		</properties>
		<!-- Disable shared cache across different EntityManagers, for details see http://wiki.eclipse.org/EclipseLink/Examples/JPA/Caching. -->
		<shared-cache-mode>NONE</shared-cache-mode>
	</persistence-unit>
</persistence>
