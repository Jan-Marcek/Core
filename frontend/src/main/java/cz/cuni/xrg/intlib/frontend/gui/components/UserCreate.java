package cz.cuni.xrg.intlib.frontend.gui.components;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.TwinColSelect;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;


import cz.cuni.xrg.intlib.commons.app.user.Role;
import cz.cuni.xrg.intlib.commons.app.user.User;



/**
 *  Dialog for new user creation. Called from the {@link #UsersList}.
 * 
 * @author Maria Kukhar
 *
 */
public class UserCreate extends Window {

	@AutoGenerated
	private GridLayout userDetailsLayout;
	@AutoGenerated
	private Label label;
	private TwinColSelect roleSelector;
	private InvalidValueException mailEx;
	
	private VerticalLayout mainLayout;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public UserCreate(boolean newUser) {
		this.setResizable(false);
		this.setModal(true);
		this.setCaption("Create new user");

		buildMainLayout(newUser);
		this.setContent(mainLayout);
		setSizeUndefined();

	}

	/**
	 * The method calls from {@link #Administrator} and sets the corresponding 
	 * values of specific user to the dialog.
	 * 
	 * @param selectedUser. User that locate in the row of User table 
	 * in which has been pressed the button Change settings.
	 */
	public void setSelectedUser(User selectedUser)
	{	
	}

	/**
	 * Builds main layout 
	 * 
	 * @return mainLayout VerticalLayout with all dialog components
	 */
	@AutoGenerated
	private VerticalLayout buildMainLayout(boolean newUser) {
		
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);


		userDetailsLayout = new GridLayout(2, 3);
		userDetailsLayout.setImmediate(false);
		userDetailsLayout.setSpacing(true);
		userDetailsLayout.setWidth("100%");

		TextField userName = new TextField();
		userName.setWidth("100%");
		userName.addValidator(new Validator() {
			
			@Override
			public void validate(Object value) throws InvalidValueException {
				if (value.getClass() == String.class
						&& !((String) value).isEmpty()) {
					return;
				}
				throw new InvalidValueException("User name field must be filled!");
			}
		});
		
		userDetailsLayout.addComponent(new Label("User name:"), 0, 0);
		userDetailsLayout.addComponent(userName, 1, 0);
		
		PasswordField password = new PasswordField();
		password.setWidth("100%");
		password.addValidator(new Validator() {
			
			@Override
			public void validate(Object value) throws InvalidValueException {
				if (value.getClass() == String.class
						&& !((String) value).isEmpty()) {
					return;
				}
				throw new InvalidValueException("Password field must be filled!");
			}
		});
		password.setVisible(!newUser);
		
		Label passLabel = new Label("Password:");
		passLabel.setVisible(!newUser);
		
		userDetailsLayout.addComponent(passLabel, 0, 1);
		userDetailsLayout.addComponent(password, 1, 1);
		
		
		
		TextField userEmail = new TextField();
		userEmail.setWidth("100%");
		userEmail.addValidator(new Validator() {
			@Override
			public void validate(Object value) throws InvalidValueException {
				
					if (value.getClass() == String.class
							&& !((String) value).isEmpty()) {
						String inputEmail = (String) value;
						if(!inputEmail.matches("[0-9a-zA-Z._-]+@[0-9a-zA-Z]+\\.[a-zA-Z]{2,5}")){
							mailEx = new InvalidValueException("Wrong mail format");
							throw mailEx;
						}
						return;
					}
					mailEx = new InvalidValueException("E-mail field must be filled!");
					throw mailEx;
					

				
			}
		});
		
		userDetailsLayout.addComponent(new Label("E-mail:"), 0, 2);
		userDetailsLayout.addComponent(userEmail, 1,2);
		
		userDetailsLayout.setColumnExpandRatio(0, 0.2f);
		userDetailsLayout.setColumnExpandRatio(1, 0.8f);
		
		roleSelector = new TwinColSelect();
		roleSelector.addItem(Role.ADMINISTRATOR);
		roleSelector.addItem(Role.USER);

		roleSelector.setNullSelectionAllowed(true);
		roleSelector.setMultiSelect(true);
		roleSelector.setImmediate(true);
		roleSelector.setWidth("350px");
		roleSelector.setHeight("200px");
		roleSelector.setLeftColumnCaption("Defined Roles:");
		roleSelector.setRightColumnCaption("Set Roles:");
		//roleSelector is mandatory component 
		roleSelector.addValidator(new Validator() {

			@Override
			public void validate(Object value) throws InvalidValueException {
				String s = value.toString();

				if (value.toString() != "[]") {
					return;
				}
				throw new InvalidValueException(
						"Set Roles must be filled!");

			}
		});
		
		

		
		//Layout with buttons Save and Cancel
		HorizontalLayout buttonBar = new HorizontalLayout();
		buttonBar.setMargin(true);
		
		//Save button
		Button createRule = new Button();
		createRule.setCaption("Save user");
		createRule.setImmediate(true);
		
		buttonBar.addComponent(createRule);
		
		Button cancelButton = new Button("Cancel", new Button.ClickListener() {

			/**
			 * Closes Scheduling pipeline window
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(Button.ClickEvent event) {
			close();

			}
		});
		buttonBar.addComponent(cancelButton);
		
			
		mainLayout.addComponent(userDetailsLayout);
		mainLayout.addComponent(roleSelector);
		mainLayout.addComponent(buttonBar);
		mainLayout.setComponentAlignment(buttonBar, Alignment.MIDDLE_RIGHT);

		return mainLayout;
	}
	


}
