package cz.cuni.xrg.intlib.frontend.gui.views;

import org.apache.commons.httpclient.UsernamePasswordCredentials;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractTextField.TextChangeEventMode;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class ExecutionMonitor extends CustomComponent implements View,
		ClickListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Label label;

	private DateField dateFilter;
	private TextField nameFilter;
	private TextField userFilter;
	private ComboBox statusFilter;
	private ComboBox DebugFilter;
	private IndexedContainer tableData;
	static String filter;

	static String[] visibleCols = new String[] { "date", "name", "user",
			"status", "debug", "obsolete", "actions", "report" };
	static String[] headers = new String[] { "Date", "Name", "User", "Status",
			"Debug", "Obsolete", "Actions", "Report" };

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ExecutionMonitor() {

	}

	private MonitorTableFilter tableDataFilter = null;

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(true);
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setStyleName("mainLayout");

		// top-level component properties
		// setSizeUndefined();
		setWidth("100%");
		setHeight("100%");

		// label
		label = new Label();
		label.setImmediate(false);
		label.setWidth("-1px");
		label.setHeight("-1px");
		label.setValue("<h1>ExecutionMonitor</h>");
		label.setContentMode(ContentMode.HTML);
		mainLayout.addComponent(label);

		Label filtersLabel = new Label();
		filtersLabel.setCaption("Filters:");
		filtersLabel.setWidth("100px");
		mainLayout.addComponent(filtersLabel);

		filter = new String();

		HorizontalLayout filtersLayout = new HorizontalLayout();
		filtersLayout.setWidth("100%");
		filtersLayout.setSpacing(true);

		dateFilter = new DateField();
		// dateFilter.setCaption("Date Filter");
		dateFilter.setWidth("90%");
		filtersLayout.addComponent(dateFilter);

		if (tableDataFilter == null) {
			tableDataFilter = new MonitorTableFilter();
		}
		nameFilter = new TextField();
		nameFilter.setInputPrompt("Pipeline Name Filter");
		nameFilter.setWidth("90%");
		nameFilter.setTextChangeEventMode(TextChangeEventMode.LAZY);
		nameFilter.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				tableDataFilter.setNameFilter(event.getText());
				
				tableData.removeAllContainerFilters();
				tableData.addContainerFilter(tableDataFilter);

			}
		});

		filtersLayout.addComponent(nameFilter);

		userFilter = new TextField();
		userFilter.setInputPrompt("User Filter");
		userFilter.setWidth("90%");
		userFilter.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				/*
				 * if (filter=="name"){ tableData.addContainerFilter(new
				 * NameFilter(event //.getText())); filter= "user"; } else{
				 * 
				 * tableData.removeAllContainerFilters();
				 * tableData.addContainerFilter(new NameFilter(event
				 * .getText())); }
				 */
				tableDataFilter.setUserFilter(event.getText());
				tableData.removeAllContainerFilters();
				tableData.addContainerFilter(tableDataFilter);

			}
		});

		filtersLayout.addComponent(userFilter);

		statusFilter = new ComboBox();
		statusFilter.setInputPrompt("Status Filter");
		statusFilter.setWidth("90%");
		statusFilter.addItem("Running");
		statusFilter.addItem("Finished no errors");
		statusFilter.addItem("Finished with errors");
		filtersLayout.addComponent(statusFilter);

		DebugFilter = new ComboBox();
		DebugFilter.setInputPrompt("Debug Filter");
		DebugFilter.setWidth("90%");
		DebugFilter.addItem("Debug Yes");
		filtersLayout.addComponent(DebugFilter);

		Button buttonDeleteFilters = new Button();
		buttonDeleteFilters.setCaption("Delete Filters");
		buttonDeleteFilters.setHeight("25px");
		buttonDeleteFilters.setWidth("100%");
		buttonDeleteFilters
				.addClickListener(new com.vaadin.ui.Button.ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						// TODO Auto-generated method stub
						dateFilter.setValue(null);
						nameFilter.setValue("");
						userFilter.setValue("");
						statusFilter.setValue(null);
						DebugFilter.setValue(null);
						tableData.removeAllContainerFilters();

					}
				});
		filtersLayout.addComponent(buttonDeleteFilters);

		mainLayout.addComponent(filtersLayout);

		tableData = getTableData();
		Table monitorTable = new Table("");
		monitorTable.setContainerDataSource(tableData);
		monitorTable.setWidth("100%");
		monitorTable.setHeight("100%");
		monitorTable.setImmediate(true);
		monitorTable.setVisibleColumns(visibleCols); // Set visible columns
		monitorTable.setColumnHeaders(headers);
		// monitorTable.setPageLength(10);

		monitorTable.addGeneratedColumn("actions",
				new GenerateActionColumnMonitor(this));

		mainLayout.addComponent(monitorTable);
		// mainLayout.addComponent(monitorTable.createControls());

		return mainLayout;
	}

	public static IndexedContainer getTableData() {

		String[] date = { "2012.02.12", "2012.02.13", "2012.12.12",
				"2013.05.13", "2013.01.18", "2012.03.01", "2012.04.30" };
		String[] name = { "Ext", "Alf", "Ext", "Pipe1", "Ted", "Ted", "Ted" };
		String[] user = { "knapt", "knapt", "tomesj", "kukharm", "skpdap",
				"kukharm", "skpdap" };
		String[] status = { "progress", "error", "ok", "error", "ok", "ok",
				"ok" };

		IndexedContainer result = new IndexedContainer();

		for (String p : visibleCols) {
			result.addContainerProperty(p, String.class, "");
		}

		int max = getMinLength(date, name, user, status);

		for (int i = 0; i < max; i++) {
			Object num = result.addItem();
			result.getContainerProperty(num, "date").setValue(date[i]);
			result.getContainerProperty(num, "user").setValue(user[i]);
			result.getContainerProperty(num, "name").setValue(name[i]);
			result.getContainerProperty(num, "status").setValue(status[i]);

		}

		return result;
	}

	private final static int UNDEFINED_LENGTH = -1;

	public static int getMinLength(String[]... arraysLength) {
		int min = UNDEFINED_LENGTH;
		for (int i = 0; i < arraysLength.length; i++) {
			if (min == UNDEFINED_LENGTH) {
				min = arraysLength[i].length;
			} else {
				min = Math.min(min, arraysLength[i].length);
			}
		}
		return min;

	}

	@Override
	public void enter(ViewChangeEvent event) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub

	}

}

class MonitorTableFilter implements Filter {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	// private String needle;
	private String userFilter;
	private String nameFilter;

	public MonitorTableFilter() {
		// this.needle = needle.toLowerCase();
	}

	public void setNameFilter(String value) {
		this.nameFilter  = value.toLowerCase();

	}

	public void setUserFilter(String value) {
		this.userFilter= value.toLowerCase();

	}

	private boolean stringIsSet(String value)
	{
		if (value!=null && value.length()>0)
			return true;
		return false;
	}
	public boolean passesFilter(Object itemId, Item item) {

		if (stringIsSet(this.userFilter)) {
			String objectUser = ((String)item.getItemProperty("user").getValue()).toLowerCase();
			if (objectUser.contains(this.userFilter)==false)
				return false;
			
		}
		if (stringIsSet(this.nameFilter) ) {
			String objectUser = ((String)item.getItemProperty("name").getValue()).toLowerCase();
			if (objectUser.contains(this.nameFilter)==false)
				return false;
		}
		// String haystack = ("" + item.getItemProperty("name").getValue()+
		// item.getItemProperty("user").getValue()).toLowerCase();

		// return haystack.contains(needle);
		return true;
	}

	public boolean appliesToProperty(Object id) {
		return true;
	}
}
