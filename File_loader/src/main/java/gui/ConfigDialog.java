package gui;

import module.Config;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.*;

import cz.cuni.xrg.intlib.commons.configuration.*;

/**
 * Configuration dialog.
 * @author Petyr
 *
 */
public class ConfigDialog extends CustomComponent {

	private static final long serialVersionUID = 1L;
	
	/**
	 * TODO Implement your own configuration component. You can use vaadin visual editor if you like.
	 * Just remember don't use vaddin classes the ere not located directly in package com.vaadi.ui; 
	 */
	
	private GridLayout mainLayout;
	private Button buttonCanc;
	private Button buttonSave;
	private Button buttonDevel;
	private TabSheet tabSheet;
	private VerticalLayout verticalLayoutDetails;
	private VerticalLayout verticalLayoutCore;
	private HorizontalLayout horizontalLayoutFormat;
	private ComboBox comboBoxFormat; //RDFformat
	private Label labelFormat;
	private CheckBox checkBoxDiffName;
	private TextField textFieldFileName; // FileName
	private TextField textFieldDir;	//Directory
	private HorizontalLayout horizontalLayout_2;
	private GridLayout gridLayoutName;
	private TextArea textAreaDescr; //Description
	private Label labelDescr;
	private TextField textFieldName; // NameDPU
	private Label labelName;
	private HorizontalLayout horizontalLayoutButtons;
		
	public ConfigDialog() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}
	
	/**
	 * Return current configuration from dialog. Can return null, if 
	 * current configuration is invalid.
	 * @return current configuration or null
	 */
	public Configuration getConfiguration() { 
		Configuration config = new Configuration();
		/**
		 * TODO Gather data from you dialog and store them into configuration. You can use 
		 * 	enum Config to make sure that you don't miss spell the ids of values.
		 * 	Also remember that you can return null in case of invalid configuration in dialog.
		 */
		
		config.setValue(Config.NameDPU.name(), textFieldName.getValue());
		config.setValue(Config.Description.name(), textAreaDescr.getValue());
		config.setValue(Config.Directory.name(), textFieldDir.getValue());
		config.setValue(Config.FileName.name(), textFieldFileName.getValue());
		config.setValue(Config.RDFformat.name(), comboBoxFormat.getValue());

		return config;
	}
	
	/**
	 * Load values from configuration into dialog.
	 * @throws ConfigurationException
	 * @param conf
	 */
	public void setConfiguration(Configuration conf) {
		/**
		 * TODO Load configuration from conf into dialog components. You can use 
		 * 	enum Config to make sure that you don't miss spell the ids of values.
		 *  The ConfigurationException can be thrown in case of invalid configuration.
		 */
		
		try
		{
			textFieldName.setValue( (String) conf.getValue(Config.NameDPU.name()));
			textAreaDescr.setValue( (String) conf.getValue(Config.Description.name()));
			textFieldDir.setValue( (String) conf.getValue(Config.Directory.name()));
			textFieldFileName.setValue( (String) conf.getValue(Config.FileName.name()));
			comboBoxFormat.setValue( (String) conf.getValue(Config.RDFformat.name()));
		} 
		catch(Exception ex) {
			// throw setting exception
			throw new ConfigurationException();
		}
	}
	
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout(2, 2);
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("360px");
		setHeight("450px");
		
		// tabSheet
		tabSheet = buildTabSheet();
		mainLayout.addComponent(tabSheet,  0, 0, 1, 0);
		mainLayout.setComponentAlignment(tabSheet, Alignment.TOP_LEFT);
		
		// buttonDevel
		buttonDevel = new Button();
		buttonDevel.setCaption("Develop");
		buttonDevel.setImmediate(true);
		buttonDevel.setWidth("80px");
		mainLayout.addComponent(buttonDevel, 0,1);
		mainLayout.setComponentAlignment(buttonDevel, Alignment.TOP_LEFT);
		

		horizontalLayoutButtons = buildHorizontalLayout();
		mainLayout.addComponent(horizontalLayoutButtons,1,1);
		mainLayout.setComponentAlignment(horizontalLayoutButtons, Alignment.TOP_RIGHT);
		
		return mainLayout;
	}


	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setImmediate(true);
		tabSheet.setWidth("360px");
		tabSheet.setHeight("340px");
		
		// verticalLayoutCore
		verticalLayoutCore = buildVerticalLayoutCore();
		tabSheet.addTab(verticalLayoutCore, "Core", null);
		
		// verticalLayoutDetails
		verticalLayoutDetails = new VerticalLayout();
		verticalLayoutDetails.setImmediate(false);
		verticalLayoutDetails.setWidth("100.0%");
		verticalLayoutDetails.setHeight("100.0%");
		verticalLayoutDetails.setMargin(false);
		tabSheet.addTab(verticalLayoutDetails, "Details", null);
		
		return tabSheet;
	}


	private VerticalLayout buildVerticalLayoutCore() {
		// common part: create layout
		verticalLayoutCore = new VerticalLayout();
		verticalLayoutCore.setImmediate(false);
		verticalLayoutCore.setWidth("100.0%");
		verticalLayoutCore.setHeight("100.0%");
		verticalLayoutCore.setMargin(true);
		verticalLayoutCore.setSpacing(true);
		
		// gridLayoutName
		gridLayoutName = buildGridLayoutName();
		verticalLayoutCore.addComponent(gridLayoutName);
		
		// horizontalLayout_2
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("312px");
		horizontalLayout_2.setHeight("1px");
		horizontalLayout_2.setMargin(false);
		verticalLayoutCore.addComponent(horizontalLayout_2);
		
		// textFieldDir
		textFieldDir = new TextField();
		textFieldDir.setCaption("Directory:");
		textFieldDir.setImmediate(false);
		textFieldDir.setWidth("305px");
		textFieldDir.setHeight("-1px");
		verticalLayoutCore.addComponent(textFieldDir);
		
		// textFieldFileName
		textFieldFileName = new TextField();
		textFieldFileName.setCaption("File name (no extension):");
		textFieldFileName.setImmediate(false);
		textFieldFileName.setWidth("305px");
		textFieldFileName.setHeight("-1px");
		verticalLayoutCore.addComponent(textFieldFileName);
		
		// checkBoxDiffName
		checkBoxDiffName = new CheckBox();
		checkBoxDiffName
				.setCaption("Each pipeline execution generates a different name");
		checkBoxDiffName.setImmediate(false);
		checkBoxDiffName.setWidth("-1px");
		checkBoxDiffName.setHeight("-1px");
		verticalLayoutCore.addComponent(checkBoxDiffName);
		
		// horizontalLayoutFormat
		horizontalLayoutFormat = buildHorizontalLayoutFormat();
		verticalLayoutCore.addComponent(horizontalLayoutFormat);
		
		return verticalLayoutCore;
	}


	private GridLayout buildGridLayoutName() {
		// common part: create layout
		gridLayoutName = new GridLayout();
		gridLayoutName.setImmediate(false);
		gridLayoutName.setWidth("-1px");
		gridLayoutName.setHeight("-1px");
		gridLayoutName.setMargin(false);
		gridLayoutName.setSpacing(true);
		gridLayoutName.setColumns(2);
		gridLayoutName.setRows(2);
		
		// labelName
		labelName = new Label();
		labelName.setImmediate(false);
		labelName.setWidth("-1px");
		labelName.setHeight("-1px");
		labelName.setValue("Name:");
		gridLayoutName.addComponent(labelName, 0, 0);
		
		// textFieldName
		textFieldName = new TextField();
		textFieldName.setImmediate(false);
		textFieldName.setWidth("234px");
		textFieldName.setHeight("-1px");
		gridLayoutName.addComponent(textFieldName, 1, 0);
		
		// labelDescr
		labelDescr = new Label();
		labelDescr.setImmediate(false);
		labelDescr.setWidth("-1px");
		labelDescr.setHeight("18px");
		labelDescr.setValue("Description:");
		gridLayoutName.addComponent(labelDescr, 0, 1);
		
		// textAreaDescr
		textAreaDescr = new TextArea();
		textAreaDescr.setImmediate(false);
		textAreaDescr.setWidth("234px");
		textAreaDescr.setHeight("40px");
		gridLayoutName.addComponent(textAreaDescr, 1, 1);
		
		return gridLayoutName;
	}


	private HorizontalLayout buildHorizontalLayoutFormat() {
		// common part: create layout
		horizontalLayoutFormat = new HorizontalLayout();
		horizontalLayoutFormat.setImmediate(false);
		horizontalLayoutFormat.setWidth("-1px");
		horizontalLayoutFormat.setHeight("-1px");
		horizontalLayoutFormat.setMargin(false);
		horizontalLayoutFormat.setSpacing(true);
		
		// labelFormat
		labelFormat = new Label();
		labelFormat.setImmediate(false);
		labelFormat.setWidth("79px");
		labelFormat.setHeight("-1px");
		labelFormat.setValue("RDF Format:");
		horizontalLayoutFormat.addComponent(labelFormat);
		
		// comboBoxFormat
		comboBoxFormat = new ComboBox();
		comboBoxFormat.setImmediate(false);
		comboBoxFormat.setWidth("100px");
		comboBoxFormat.setHeight("-1px");
		horizontalLayoutFormat.addComponent(comboBoxFormat);
		
		return horizontalLayoutFormat;
	}
	
	private HorizontalLayout buildHorizontalLayout() {
		// common part: create layout
		horizontalLayoutButtons = new HorizontalLayout();
		horizontalLayoutButtons.setImmediate(false);
		horizontalLayoutButtons.setWidth("240px");
		horizontalLayoutButtons.setHeight("1px");
		horizontalLayoutButtons.setMargin(false);
		horizontalLayoutButtons.setSpacing(true);

		
		// buttonSave
		buttonSave = new Button();
		buttonSave.setCaption("Save & Commit");
		buttonSave.setImmediate(true);
		buttonSave.setWidth("-1px");

		buttonSave.setHeight("-1px");
		horizontalLayoutButtons.addComponent(buttonSave);
		
		// buttonCanc
		buttonCanc = new Button();
		buttonCanc.setCaption("Cancel");
		buttonCanc.setImmediate(true);
		buttonCanc.setWidth("-1px");
		buttonCanc.setHeight("-1px");
		horizontalLayoutButtons.addComponent(buttonCanc);
		
		return horizontalLayoutButtons;
	}

}
